###최종본 
dna = input('염기서열을 입력해줘:') ### 염기서열을 사용자로부터 받는다.
fullprimer = input('프라이머 입력해줘:') ### 프라이머를 사용자로부터 받는다.
checker = True 
print("주형가닥 DNA는",dna) ### 사용자가 입력한 염기서열이 맞는지 확인 하기 위해서 한번 출력시켜준다. 
print("primer의 서열은",fullprimer) ### 사용자가 입력한 프라이머가 맞는지 확인 하기 위해서 한번 출력시켜준다. 
yumgi = list(dna) ### DNA 주형가닥을 YUMGI의 형채로 list로 저장
primer = list(fullprimer) ### 프라이머를 list의 형태로 저장

a=len(yumgi)
num=0
yumgi.insert(0,0)
for i in range(a):
    del yumgi[0]
    for j in range(len(primer)):
        if checker:
            if yumgi[int(j)]== primer[int(j)]:
                checker=True
            else:
                checker=False
        else:
            checker=False
    if checker:
        num +=1
        print(num, '번째 서열에서 프라이머가 존재합니다')
        checker=True
    else:
        num +=1
        checker=True

def enzyme(dna,fullprimer) :
    dna_saver = []
    cnt = 0
    check = 0
    while len(dna[0:-1] ) != 1 :
        for i in range(len(dna)-1) :
            if dna[i:i+len(fullprimer)] == fullprimer :
                dna1 = dna[0:i+1]
                print(dna1)
                check += 1
                break
        else : 
            print(dna)
            cnt += 1
            break
        if check == 0 :
            break
        dna_saver.append(dna1)
        cnt +=1
        dna = dna[len(dna1):len(dna)]
    if check != 0 :
        print('RFLP의 갯수는' , cnt , '입니다')
    else :
        print('만들어진 절편은 존재하지 않습니다.')
enzyme(dna,fullprimer)


def comp(seq):  #상보적 방식 함수
    comp_dict={'A':'T', 'T':'A', 'C':'G', 'G':'C'}
    seq_comp=""
    for char in seq:
        if char in comp_dict:
            seq_comp = seq_comp + comp_dict[char]
        else:
            seq_comp = seq_comp + '?'
    return seq_comp
 
def rev(seq): #역순 방식 함수
    comp_dict={'A':'A', 'T':'T', 'C':'C', 'G':'G'}
    rev_str = "".join(reversed(seq))
    seq_rev = ""
    for char in rev_str:
        if char in comp_dict:
            seq_rev = seq_rev + comp_dict[char]
        else:
            seq_rev = seq_rev + '?'
    return seq_rev
 
def rev_comp(seq): #상보적 역순 방식 함수
    return (rev(comp(seq)))
 
while True: #입력값 루프, 0 입력 시 루프 종료
    src = dna
    cnvt = int(input("1(Comp) 2(Rev) 3(Rev_Comp)"))
    if cnvt >= 1 and cnvt <=3:
        if cnvt == 1:
            rslt = comp(src)
            print(src, "->", rslt)
        elif cnvt == 2:
            rslt = rev(src)
            print(src, "->", rslt)
        else:
            rslt = rev_comp(src)
            print(src,"->",rslt)
    elif cnvt == 0:
        break
    else:
        print("1(Comp) 2(Rev) 3(Rev_Comp)"

 class Base : <br>
    def __init__(self, k=[]) : <br>
        self.bases = k <br>
    def polymerase(self) : <br> # (1) DNA를 중합하는 함수
        a = self.bases[::-1] <br>
        b = [] <br>
        for i in range(len(a)) : <br>
            if a[i] == 'A' : <br>
                b.append('T') <br>
            elif a[i] == 'G' : <br>
                b.append('C') <br>
            elif a[i] == 'C' : <br>
                b.append('G') <br>
            elif a[i] == 'T' : <br>
                b.append('A') <br>
        for i in range(len(b)) : <br>
            print(b[i], end = '') <br>
        
    def lyase(self) : # (2) DNA 1개의 염기를 지우는 함수
        return self.bases[0:-1] 
    def size(self) : # (3) DNA의 base pair의 수
        return len(self.bases) 
    def Dna_checker(self) : # (4) DNA가 맞는지 확인하는 함수
        for i in range(len(self.bases)): 
            if self.bases[i] == 'A': 
                continue 
            elif self.bases[i] == 'G':
                continue <br>
            elif self.bases[i] == 'C': 
                continue 
            elif self.bases[i] == 'T':
                continue <br>
        else: 
            print('다음의 DNA는 존재하지 않습니다.')
            return False 
